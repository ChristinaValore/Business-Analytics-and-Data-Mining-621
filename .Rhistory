library(tidyverse); library(dplyr); library(psych); library(corrplot); library (ggplot2)
train <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-training-data.csv")
eval <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-evaluation-data.csv")
#view the data
head(train)
head(eval)
#remove index column
train <- select(train,-1)
eval <- select(eval,-1)
View(eval)
head (train)
head (eval)
summary(train)
sort(train$TARGET_WINS)
sort(train$TEAM_BATTING_3B)
#sort(train$TARGET_WINS)
#sort(train$TEAM_BATTING_3B)
sort(train$TEAM_BATTING_HR)
View(train)
#sort(train$TARGET_WINS)
#sort(train$TEAM_BATTING_3B)
#sort(train$TEAM_BATTING_HR)
sort(train$TEAM_BATTING_BB)
library(tidyverse); library(dplyr); library(psych); library(corrplot); library (ggplot2); library(funModeling)
df_status(train)
train <- subset(train, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
head(train )
train <- subset(train, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
train <- subset(train, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
View(eval)
View(train)
library(tidyverse); library(dplyr); library(psych); library(corrplot); library (ggplot2); library(funModeling)
train <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-training-data.csv")
eval <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-evaluation-data.csv")
#remove index column
train <- select(train,-1)
eval <- select(eval,-1)
#view data for both sets, notice the index column has been removed
head (train)
head (eval)
View(eval)
View(train)
train <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-training-data.csv")
eval <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-evaluation-data.csv")
train <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-training-data.csv")
eval <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-evaluation-data.csv")
#remove index column, which is first column in both datasets
train <- select(train,-1)
eval <- select(eval,-1)
#view data for both sets, notice the index column has been removed
head (train)
head (eval)
#univariate view of basic stats
summary(train)
#gives us information about 0's, NA's, variable type, and unique values
df_status(train)
train <- subset(train, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
head(train)
train <- subset(train, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
train <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-training-data.csv")
eval <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-evaluation-data.csv")
#remove index column, which is first column in both datasets
train <- select(train,-1)
eval <- select(eval,-1)
#view data for both sets, notice the index column has been removed
head (train)
head (eval)
train <- subset(train, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
View(train)
levels(train)
head(train)
View(eval)
m <- lm(TARGET_WINS ~ ., data=train)
cook <- cooks.distance(m)
m <- lm(TARGET_WINS ~ ., data=train)
cook <- cooks.distance(m)
plot(cook, pch="*", cex=2, main="Cooks distance: Influential Observations")  # plot Cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
m <- lm(TARGET_WINS ~ ., data=train)
cook <- cooks.distance(m)
plot(cook, pch="*", cex=2, main="Cooks distance: Influential Observations")  # plot Cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red")  # add labels
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))])  # influential row numbers
head(train[influential, ])
car::outlierTest(m)
View(train)
View(eval)
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))])  # influential row numbers
train[influential, ]
library(car)
detach("package:carData", unload = TRUE)
install.packages("car")
names(cook)
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # influential row numbers
head(train[influential, ])
View(train)
m <- lm(TARGET_WINS ~ ., data=train) # model of data with all variables considered
cook <- cooks.distance(m)
plot(cook, pch="*", cex=2, main="Cook's Distance: Influential Observations") # plot Cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red") # add cutoff line = 4*mean
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red") # add labels for points
par(mfrow = c(2,2)) #view graphs in 2x2 view
hist(train$TEAM_BATTING_HR) # homerun
hist(train$TEAM_PITCHING_HR) # homeruns allowed
hist(train$TEAM_BATTING_H) # hits
hist(train$TEAM_BATTING_2B) # doubles
hist(train$TEAM_BATTING_3B) # triples
hist(train$TEAM_BATTING_BB) # walks
hist(train$TEAM_BASERUN_SB) # stolen
hist(train$TEAM_FIELDING_DP) # double
hist(train$TEAM_PITCHING_SO) # strikeouts by pitcher
par(mfrow = c(3,3)) #view graphs in 3x3 view
hist(train$TEAM_BATTING_HR) # homerun
hist(train$TEAM_PITCHING_HR) # homeruns allowed
hist(train$TEAM_BATTING_H) # hits
hist(train$TEAM_BATTING_2B) # doubles
hist(train$TEAM_BATTING_3B) # triples
hist(train$TEAM_BATTING_BB) # walks
hist(train$TEAM_BASERUN_SB) # stolen
hist(train$TEAM_FIELDING_DP) # double
hist(train$TEAM_PITCHING_SO) # strikeouts by pitcher
plot(train~TARGET_WNS~TEAM_BATTING_3B,train)
library(tidyverse); library(dplyr); library(psych); library(corrplot); library (ggplot2); library(funModeling)
# import data
train <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-training-data.csv")
eval <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-evaluation-data.csv")
train <- select(train,-1) # remove index column, which is first column in both datasets
eval <- select(eval,-1)
head (train) # view data for both sets, notice the index column has been removed
head (eval)
summary(train) # univariate view of basic stats
#gives us information about 0's, NA's, variable type, and unique values
df_status(train)
plot(train~TARGET_WNS~TEAM_BATTING_H,train)
# import data
train <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-training-data.csv")
eval <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-evaluation-data.csv")
train <- select(train,-1) # remove index column, which is first column in both datasets
eval <- select(eval,-1)
head (train) # view data for both sets, notice the index column has been removed
head (eval)
summary(train) # univariate view of basic stats
#gives us information about 0's, NA's, variable type, and unique values
df_status(train)
train <- subset(train, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP)) # drop both variable columns from data frame
head(train) # check columns are removed
plot(train~TARGET_WNS~TEAM_BATTING_H,train)
plot(train~TARGET_WINS~TEAM_BATTING_H,train)
plot(TARGET_WINS ~ TEAM_BATTING_H,train)
par(mfrow = c(3,3)) #view graphs in 3x3 view
plot(TARGET_WINS ~ TEAM_BATTING_H,train)
plot(TARGET_WINS ~ TEAM_BATTING_BB,train)
par(mfrow = c(2,2)) #view graphs in 3x3 view
plot(TARGET_WINS ~ TEAM_BATTING_H,train)
plot(TARGET_WINS ~ TEAM_BATTING_BB,train)
par(mfrow = c(2,2)) #view graphs in 3x3 view
plot(TARGET_WINS ~ TEAM_BATTING_H,train)
plot(TARGET_WINS ~ TEAM_BATTING_BB,train)
plot(TARGET_WINS ~ TEAM_PITCHING_H,train)
plot(TARGET_WINS ~ TEAM_PITCHING_BB,train)
par(mfrow = c(2,2)) #view graphs in 2x2 view
hist(train$TEAM_BATTING_H) # hits
hist(train$TEAM_BATTING_BB) # walks
hist(train$TEAM_PITCHING_H) # hits allowed
hist(train$TEAM_PITCHING_BB) #walks allowed
par(mfrow = c(2,1)) #view graphs in 2x2 view
hist(train$TEAM_BATTING_H) # hits
hist(train$TEAM_BATTING_BB) # walks
par(mfrow = c(2,1)) #view graphs in 2x2 view
hist(train$TEAM_PITCHING_H) # hits allowed
hist(train$TEAM_PITCHING_BB) #walks allowed
par(mfrow = c(2,2)) #view graphs in 2x2 view
hist(train$TEAM_BATTING_H) # hits
hist(train$TEAM_BATTING_BB) # walks
hist(train$TEAM_PITCHING_H) # hits allowed
hist(train$TEAM_PITCHING_BB) #walks allowed
par(mfrow = c(2,2)) #view graphs in 2x2 view
hist(train$TEAM_BATTING_H) # hits
hist(train$TEAM_BATTING_BB) # walks
hist(train$TEAM_PITCHING_H) # hits allowed
hist(train$TEAM_PITCHING_BB) #walks allowed
m <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB + TEAM_PITCHING_H + TEAM_PITCHING_BB, data=train) # model of data with all variables considered
cook <- cooks.distance(m)
plot(cook, pch="*", cex=2, main="Cook's Distance: Influential Observations") # plot Cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red") # add cutoff line, which is equivalent to 4*mean
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red") # add labels for points (rows)
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # influential row numbers
head(train[influential, ]) # show rows that match influential numbers
car::outlierTest(m)
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # influential row numbers
train[influential, ] # show rows that match influential numbers
m <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB + TEAM_PITCHING_H + TEAM_PITCHING_BB, data=train) # model with four variables considered
cook <- cooks.distance(m)
plot(cook, pch="*", cex=2, main="Cook's Distance: Influential Observations") # plot Cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red") # add cutoff line, which is equivalent to 4*mean
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red") # add labels for points (rows)
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # influential row numbers
train[influential, ] # show rows that match influential numbers
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # influential row numbers
head(train[influential, ]) # show rows that match influential numbers
m <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB - (TEAM_PITCHING_H + TEAM_PITCHING_BB), data=train) # model with four variables considered
cook <- cooks.distance(m)
plot(cook, pch="*", cex=2, main="Cook's Distance: Influential Observations") # plot Cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red") # add cutoff line, which is equivalent to 4*mean
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red") # add labels for points (rows)
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # add influential rows to dataframe
head(train[influential, ]) # show rows that match influential numbers
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # add influential rows to dataframe
head(train[influential, ]) # show rows that match influential numbers
car::outlierTest(m)
car::outlierTest(m)
m <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB - (TEAM_PITCHING_H + TEAM_PITCHING_BB), data=train) # model with four variables considered
cook <- cooks.distance(m)
plot(cook, pch="*", cex=2, main="Cook's Distance: Influential Observations") # plot Cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red") # add cutoff line, which is equivalent to 4*mean
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red") # add labels for points (rows)
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # add influential rows to dataframe
head(train[influential, ]) # show rows that match influential numbers
car::outlierTest(m)
library(tidyverse); library(dplyr); library(psych); library(corrplot); library (ggplot2); library(funModeling); library(Hmisc)
View(m)
library(tidyverse); library(dplyr); library(psych); library(corrplot); library (ggplot2); library(funModeling); library(Hmisc)
# import data
train <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-training-data.csv")
eval <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-evaluation-data.csv")
train <- select(train,-1) # remove index column, which is first column in both datasets
eval <- select(eval,-1)
head (train) # view data for both sets, notice the index column has been removed
head (eval)
summary(train) # univariate view of basic stats
#gives us information about 0's, NA's, variable type, and unique values
df_status(train)
train <- subset(train, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP)) # drop both variable columns from data frame
head(train) # check columns are removed
par(mfrow = c(2,2)) #view graphs in 2x2 view
plot(TARGET_WINS ~ TEAM_BATTING_H,train) # batting hits
plot(TARGET_WINS ~ TEAM_BATTING_BB,train) # batting walks
plot(TARGET_WINS ~ TEAM_PITCHING_H,train) # pitching hits allowed
plot(TARGET_WINS ~ TEAM_PITCHING_BB,train) # pitching walks allowed
par(mfrow = c(2,2)) #view graphs in 2x2 view
hist(train$TEAM_BATTING_H) # hits
hist(train$TEAM_BATTING_BB) # walks
hist(train$TEAM_PITCHING_H) # hits allowed
hist(train$TEAM_PITCHING_BB) #walks allowed
m <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB - (TEAM_PITCHING_H + TEAM_PITCHING_BB), data=train) # model with four variables considered
cook <- cooks.distance(m)
plot(cook, pch="*", cex=2, main="Cook's Distance: Influential Observations") # plot Cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red") # add cutoff line, which is equivalent to 4*mean
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red") # add labels for points (rows)
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # add influential rows to dataframe
head(train[influential, ]) # show rows that match influential numbers
car::outlierTest(m)
library(tidyverse); library(dplyr); library(psych); library(corrplot); library (ggplot2); library(funModeling); library(Hmisc); library (car); library(caTools)
set.seed(123)   #  set seed to ensure you always have same random numbers generated
sample <- sample.split(data,SplitRatio = 0.80)
set.seed(123)   #  set seed to ensure you always have same random numbers generated
sample <- sample.split(data,SplitRatio = 0.80)
library(tidyverse); library(dplyr); library(psych); library(corrplot); library (ggplot2); library(funModeling); library(Hmisc); library (car); library(caTools)
# import data
data <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-training-data.csv")
eval <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-evaluation-data.csv")
data <- select(data,-1) # remove index column, which is first column in both datasets
eval <- select(eval,-1)
head (data) # view data for both sets, notice the index column has been removed
head (eval)
set.seed(123)   #  set seed to ensure you always have same random numbers generated
sample <- sample.split(data,SplitRatio = 0.80)
train_1 <- subset(data, sample == TRUE)
test_1 <- subset(data, sample == FALSE)
dim(train_1)
dim(test_1)
summary(train_1) # univariate view of basic stats
#gives us information about 0's, NA's, variable type, and unique values
df_status(train_1)
train_1 <- subset(train_1, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP)) # drop both variable columns from dataframe
head(train_1) # check columns are removed
par(mfrow = c(2,2)) #view graphs in 2x2 view
plot(TARGET_WINS ~ TEAM_BATTING_H,train_1) # batting hits
plot(TARGET_WINS ~ TEAM_BATTING_BB,train_1) # batting walks
plot(TARGET_WINS ~ TEAM_PITCHING_H,train_1) # pitching hits allowed
plot(TARGET_WINS ~ TEAM_PITCHING_BB,train_1) # pitching walks allowed
par(mfrow = c(2,2)) #view graphs in 2x2 view
hist(train_1$TEAM_BATTING_H) # hits
hist(train_1$TEAM_BATTING_BB) # walks
hist(train_1$TEAM_PITCHING_H) # hits allowed
hist(train_1$TEAM_PITCHING_BB) #walks allowed
m <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB - (TEAM_PITCHING_H + TEAM_PITCHING_BB), data=train_1) # model with four variables considered
cook <- cooks.distance(m)
plot(cook, pch="*", cex=2, main="Cook's Distance: Influential Observations") # plot Cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red") # add cutoff line, which is equivalent to 4*mean
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red") # add labels for points (rows)
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # add influential rows
head(train_1[influential, ]) # show rows that match influential numbers
outlierTest(m)
train_1$TEAM_BATTING_SO<-impute(train_1$TEAM_BATTING_SO, median)
train_1$TEAM_BASERUN_SB<-impute(train_1$TEAM_BASERUN_SB, median)
train_1$TEAM_PITCHING_SO<-impute(train_1$TEAM_PITCHING_SO, median)
train_1$TEAM_FIELDING_DP<-impute(train_1$TEAM_FIELDING_DP, median)
#removed outliers
train_no<-train_1[-influential, ]
# with outliers
train_1$TEAM_BATTING_OB <- train_1$TEAM_BATTING_H + train_1$TEAM_BATTING_BB # create variable team batting on base
train_1$TEAM_PITCHING_A <- train_1$TEAM_PITCHING_H + train_1$TEAM_PITCHING_BB # create variable pitching allows
train_1$BASE_DIFF <- train_1$TEAM_BATTING_OB - train_1$TEAM_PITCHING_A #create variable base diff
# without outliers
train_no$TEAM_BATTING_OB <- train_no$TEAM_BATTING_H + train_no$TEAM_BATTING_BB # create variable team batting on base
train_no$TEAM_PITCHING_A <- train_no$TEAM_PITCHING_H + train_no$TEAM_PITCHING_BB # create variable pitching allows
train_no$BASE_DIFF <- train_no$TEAM_BATTING_OB - train_no$TEAM_PITCHING_A # create variable base diff
par(mfrow = c(1,2)) #view graphs in 2x2 view
plot(train_1$BASE_DIFF,train_1$TARGET_WINS, xlab = "On plate difference", ylab = "Wins", title("Wins vs. On plate  difference"))
plot(train_no$BASE_DIFF,train_no$TARGET_WINS, xlab = "On plate difference", ylab = "Wins", title("Wins vs. On plate  difference"))
par(mfrow = c(1,2)) #view graphs in 2x2 view
plot(train_1$BASE_DIFF,train_1$TARGET_WINS, xlab = "On plate difference", ylab = "Wins", title("Wins vs. On plate difference"))
plot(train_no$BASE_DIFF,train_no$TARGET_WINS, xlab = "On plate difference", ylab = "Wins", title("Wins vs. On plate difference"))
model_1 = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_BATTING_HR + TEAM_PITCHING_A + TEAM_FIELDING_E + TEAM_FIELDING_DP, data = train_1)
summary(model_1)
model_1_no = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_BATTING_HR + TEAM_PITCHING_A + TEAM_FIELDING_E + TEAM_FIELDING_DP, data = train_no)
summary(model_1_no)
model_2 = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_FIELDING_E + TEAM_FIELDING_DP, data = train_1)
summary(model_2)
model_2_no = lm(TARGET_WINS ~ TEAM_BATTING_OB+ TEAM_FIELDING_E + TEAM_FIELDING_DP, data = train_no)
summary(model_2_no)
model_3 = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_FIELDING_E, data = train_1)
summary(model_3)
model_3_no = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_FIELDING_E, data = train_no)
summary(model_3_no)
model_4 = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_FIELDING_E +TEAM_BASERUN_SB, data = train_1)
summary(model_4)
model_4_no = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_FIELDING_E +TEAM_BASERUN_SB, data = train_no)
summary(model_4_no)
#remove same columns from train_1
test_1 <- subset(test_1, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
#missing values for test
test_1$TEAM_BATTING_SO<-impute(test_1$TEAM_BATTING_SO, median)
test_1$TEAM_BASERUN_SB<-impute(test_1$TEAM_BASERUN_SB, median)
test_1$TEAM_PITCHING_SO<-impute(test_1$TEAM_PITCHING_SO, median)
test_1$TEAM_FIELDING_DP<-impute(test_1$TEAM_FIELDING_DP, median)
#add for test_1
test_1$TEAM_BATTING_OB <- test_1$TEAM_BATTING_H + test_1$TEAM_BATTING_BB # create variable team batting on base
test_1$TEAM_PITCHING_A <- test_1$TEAM_PITCHING_H + test_1$TEAM_PITCHING_BB # create variable pitching allows
test_1$BASE_DIFF <- test_1$TEAM_BATTING_OB - test_1$TEAM_PITCHING_A
wins = test_1$TARGET_WINS
as.matrix(c(mean((wins - predict.lm(model_1, newdata = test_1))^2),
mean((wins - predict.lm(model_2, newdata = test_1))^2),
mean((wins - predict.lm(model_3, newdata = test_1))^2),
mean((wins - predict.lm(model_4, newdata = test_1))^2))
)
mse(test_1$TARGET_WINS, model_1_predict)
#remove same columns from train_1
test_1 <- subset(test_1, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
#remove same columns from train_1
test_1 <- subset(test_1, -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
View(test_1)
est_1$TEAM_BATTING_SO<-impute(test_1$TEAM_BATTING_SO, median)
test_1$TEAM_BATTING_SO<-impute(test_1$TEAM_BATTING_SO, median)
test_1$TEAM_BASERUN_SB<-impute(test_1$TEAM_BASERUN_SB, median)
test_1$TEAM_PITCHING_SO<-impute(test_1$TEAM_PITCHING_SO, median)
test_1$TEAM_FIELDING_DP<-impute(test_1$TEAM_FIELDING_DP, median)
#add for test_1
test_1$TEAM_BATTING_OB <- test_1$TEAM_BATTING_H + test_1$TEAM_BATTING_BB # create variable team batting on base
test_1$TEAM_PITCHING_A <- test_1$TEAM_PITCHING_H + test_1$TEAM_PITCHING_BB # create variable pitching allows
test_1$BASE_DIFF <- test_1$TEAM_BATTING_OB - test_1$TEAM_PITCHING_A
wins = test_1$TARGET_WINS
as.matrix(c(mean((wins - predict.lm(model_1, newdata = test_1))^2),
mean((wins - predict.lm(model_2, newdata = test_1))^2),
mean((wins - predict.lm(model_3, newdata = test_1))^2),
mean((wins - predict.lm(model_4, newdata = test_1))^2))
)
rmse(test_1$TARGET_WINS, model_1_predict)
library(tidyverse); library(dplyr); library(psych); library(corrplot); library (ggplot2); library(funModeling); library(Hmisc); library (car); library(caTools)
# import data
data <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-training-data.csv")
eval <-read.csv("https://raw.githubusercontent.com/ChristinaValore/Business-Analytics-and-Data-Mining-621/master/moneyball-evaluation-data.csv")
data <- select(data,-1) # remove index column, which is first column in both datasets
eval <- select(eval,-1)
head (data) # view data for both sets, notice the index column has been removed
head (eval)
set.seed(123)   #  set seed to ensure you always have same random numbers generated
sample <- sample.split(data,SplitRatio = 0.80)
train_1 <- subset(data, sample == TRUE)
test_1 <- subset(data, sample == FALSE)
dim(train_1) # view the dimensions
dim(test_1)
summary(train_1) # univariate view of basic stats
#gives us information about 0's, NA's, variable type, and unique values
df_status(train_1)
train_1 <- subset(train_1, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP)) # drop both variable columns from dataframe
head(train_1) # check columns are removed
par(mfrow = c(2,2)) #view graphs in 2x2 view
plot(TARGET_WINS ~ TEAM_BATTING_H,train_1) # batting hits
plot(TARGET_WINS ~ TEAM_BATTING_BB,train_1) # batting walks
plot(TARGET_WINS ~ TEAM_PITCHING_H,train_1) # pitching hits allowed
plot(TARGET_WINS ~ TEAM_PITCHING_BB,train_1) # pitching walks allowed
par(mfrow = c(2,2)) #view graphs in 2x2 view
hist(train_1$TEAM_BATTING_H) # hits
hist(train_1$TEAM_BATTING_BB) # walks
hist(train_1$TEAM_PITCHING_H) # hits allowed
hist(train_1$TEAM_PITCHING_BB) #walks allowed
m <- lm(TARGET_WINS ~ TEAM_BATTING_H + TEAM_BATTING_BB - (TEAM_PITCHING_H + TEAM_PITCHING_BB), data=train_1) # model with four variables considered
cook <- cooks.distance(m)
plot(cook, pch="*", cex=2, main="Cook's Distance: Influential Observations") # plot Cook's distance
abline(h = 4*mean(cook, na.rm=T), col="red") # add cutoff line, which is equivalent to 4*mean
text(x=1:length(cook)+1, y=cook, labels=ifelse(cook>4*mean(cook, na.rm=T),names(cook),""), col="red") # add labels for points (rows)
influential <- as.numeric(names(cook)[(cook > 4*mean(cook, na.rm=T))]) # add influential rows
head(train_1[influential, ]) # show rows that match influential numbers
outlierTest(m)
train_1$TEAM_BATTING_SO<-impute(train_1$TEAM_BATTING_SO, median)
train_1$TEAM_BASERUN_SB<-impute(train_1$TEAM_BASERUN_SB, median)
train_1$TEAM_PITCHING_SO<-impute(train_1$TEAM_PITCHING_SO, median)
train_1$TEAM_FIELDING_DP<-impute(train_1$TEAM_FIELDING_DP, median)
#removed outliers
train_no<-train_1[-influential, ]
# with outliers
train_1$TEAM_BATTING_OB <- train_1$TEAM_BATTING_H + train_1$TEAM_BATTING_BB # create variable team batting on base
train_1$TEAM_PITCHING_A <- train_1$TEAM_PITCHING_H + train_1$TEAM_PITCHING_BB # create variable pitching allows
train_1$BASE_DIFF <- train_1$TEAM_BATTING_OB - train_1$TEAM_PITCHING_A #create variable base diff
# without outliers
train_no$TEAM_BATTING_OB <- train_no$TEAM_BATTING_H + train_no$TEAM_BATTING_BB # create variable team batting on base
train_no$TEAM_PITCHING_A <- train_no$TEAM_PITCHING_H + train_no$TEAM_PITCHING_BB # create variable pitching allows
train_no$BASE_DIFF <- train_no$TEAM_BATTING_OB - train_no$TEAM_PITCHING_A # create variable base diff
par(mfrow = c(1,2)) #view graphs in 2x2 view
plot(train_1$BASE_DIFF,train_1$TARGET_WINS, xlab = "On plate difference", ylab = "Wins", title("Wins vs. On plate difference"))
plot(train_no$BASE_DIFF,train_no$TARGET_WINS, xlab = "On plate difference", ylab = "Wins", title("Wins vs. On plate difference"))
model_1 = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_BATTING_HR + TEAM_PITCHING_A + TEAM_FIELDING_E + TEAM_FIELDING_DP, data = train_1)
summary(model_1)
model_1_no = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_BATTING_HR + TEAM_PITCHING_A + TEAM_FIELDING_E + TEAM_FIELDING_DP, data = train_no)
summary(model_1_no)
model_2 = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_FIELDING_E + TEAM_FIELDING_DP, data = train_1)
summary(model_2)
model_2_no = lm(TARGET_WINS ~ TEAM_BATTING_OB+ TEAM_FIELDING_E + TEAM_FIELDING_DP, data = train_no)
summary(model_2_no)
model_3 = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_FIELDING_E, data = train_1)
summary(model_3)
model_3_no = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_FIELDING_E, data = train_no)
summary(model_3_no)
model_4 = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_FIELDING_E +TEAM_BASERUN_SB, data = train_1)
summary(model_4)
model_4_no = lm(TARGET_WINS ~ TEAM_BATTING_OB + TEAM_FIELDING_E +TEAM_BASERUN_SB, data = train_no)
summary(model_4_no)
#remove same columns from train_1
test_1 <- subset(test_1, -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
#remove same columns from train_1
test_1 <- subset(test_1, select=-c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
#missing values for test
test_1$TEAM_BATTING_SO<-impute(test_1$TEAM_BATTING_SO, median)
test_1$TEAM_BASERUN_SB<-impute(test_1$TEAM_BASERUN_SB, median)
test_1$TEAM_PITCHING_SO<-impute(test_1$TEAM_PITCHING_SO, median)
test_1$TEAM_FIELDING_DP<-impute(test_1$TEAM_FIELDING_DP, median)
#add for test_1
test_1$TEAM_BATTING_OB <- test_1$TEAM_BATTING_H + test_1$TEAM_BATTING_BB # create variable team batting on base
test_1$TEAM_PITCHING_A <- test_1$TEAM_PITCHING_H + test_1$TEAM_PITCHING_BB # create variable pitching allows
test_1$BASE_DIFF <- test_1$TEAM_BATTING_OB - test_1$TEAM_PITCHING_A
wins = test_1$TARGET_WINS
as.matrix(c(mean((wins - predict.lm(model_1, newdata = test_1))^2),
mean((wins - predict.lm(model_2, newdata = test_1))^2),
mean((wins - predict.lm(model_3, newdata = test_1))^2),
mean((wins - predict.lm(model_4, newdata = test_1))^2))
)
mse(test_1$TARGET_WINS, model_1_predict)
test_1$TEAM_BATTING_OB <- test_1$TEAM_BATTING_H + test_1$TEAM_BATTING_BB # create variable team batting on base
test_1$TEAM_PITCHING_A <- test_1$TEAM_PITCHING_H + test_1$TEAM_PITCHING_BB # create variable pitching allows
test_1$BASE_DIFF <- test_1$TEAM_BATTING_OB - test_1$TEAM_PITCHING_A
wins = test_1$TARGET_WINS
as.matrix(c(mean((wins - predict.lm(model_1, newdata = test_1))^2),
mean((wins - predict.lm(model_2, newdata = test_1))^2),
mean((wins - predict.lm(model_3, newdata = test_1))^2),
mean((wins - predict.lm(model_4, newdata = test_1))^2))
)
summary(model_1)
summary(model_2)
summary(model_3)
summary(model_4)
plot(model_1)
plot(model_3)
#residuals vs fitted suggests constant variance
#in normqq plot there appears to be some skewness at the right end
#scale-location shows homoscedasticity
#residuals vs leverage shows influential points
plot(model_4)
#residuals vs fitted suggests constant variance
#in normqq plot there appears to be some skewness at the right end
#scale-location shows homoscedasticity
#residuals vs leverage shows influential points
vif(model_1)
vif(model_2)
vif(model_3)
vif(model_4)
View(data)
View(eval)
#remove same columns from train_1
eval <- subset(eval, select = -c(TEAM_BASERUN_CS,TEAM_BATTING_HBP))
#missing values for test
eval$TEAM_BATTING_SO<-impute(eval$TEAM_BATTING_SO, median)
eval$TEAM_BASERUN_SB<-impute(eval$TEAM_BASERUN_SB, median)
eval$TEAM_PITCHING_SO<-impute(eval$TEAM_PITCHING_SO, median)
eval$TEAM_FIELDING_DP<-impute(eval$TEAM_FIELDING_DP, median)
#add for test_1
eval$TEAM_BATTING_OB <- eval$TEAM_BATTING_H + eval$TEAM_BATTING_BB # create variable team batting on base
eval$TEAM_PITCHING_A <- eval$TEAM_PITCHING_H + eval$TEAM_PITCHING_BB # create variable pitching allows
eval$BASE_DIFF <- eval$TEAM_BATTING_OB - eval$TEAM_PITCHING_A
predict_eval <- round(predict(model_4, eval),0)
write.csv(predict_eval,'Predictions_Baseball.csv', row.names = FALSE)
